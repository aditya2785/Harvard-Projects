import random

# Constants for the players
PLAYER_X = 'X'  # AI player
PLAYER_O = 'O'  # Opponent player
EMPTY = ' '     # Empty space on the board

# Function to check if a player has won
def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]):  # Check row
            return True
        if all([board[j][i] == player for j in range(3)]):  # Check column
            return True
    # Check diagonals
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True
    return False

# Function to check if the game is a draw
def is_draw(board):
    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))

# Function to check if the game is over
def is_game_over(board):
    return check_winner(board, PLAYER_X) or check_winner(board, PLAYER_O) or is_draw(board)

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    if check_winner(board, PLAYER_X):
        return 1  # AI wins
    if check_winner(board, PLAYER_O):
        return -1  # Opponent wins
    if is_draw(board):
        return 0  # Draw

    if is_maximizing:
        best_score = -float('inf')
        # Try all possible moves for AI (PLAYER_X)
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        # Try all possible moves for opponent (PLAYER_O)
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(score, best_score)
        return best_score

# Function to find the best move for the AI (PLAYER_X)
def best_move(board):
    best_score = -float('inf')
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_X
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Main function to play the game
def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    print("Tic-Tac-Toe - AI vs Opponent (X vs O)")

    while not is_game_over(board):
        print_board(board)
        
        if not any(EMPTY in row for row in board):
            print("It's a draw!")
            break

        # AI's move (Player X)
        if any(EMPTY in row for row in board):
            print("AI's turn (X):")
            move = best_move(board)
            board[move[0]][move[1]] = PLAYER_X
            if check_winner(board, PLAYER_X):
                print_board(board)
                print("AI wins!")
                break

        # Opponent's move (Player O)
        if any(EMPTY in row for row in board):
            print("Opponent's turn (O):")
            move = random_move(board)  # For simplicity, the opponent picks randomly
            board[move[0]][move[1]] = PLAYER_O
            if check_winner(board, PLAYER_O):
                print_board(board)
                print("Opponent wins!")
                break

# Random move for opponent (you can improve this part)
def random_move(board):
    empty_cells = [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]
    return random.choice(empty_cells)

if __name__ == "__main__":
    play_game()
